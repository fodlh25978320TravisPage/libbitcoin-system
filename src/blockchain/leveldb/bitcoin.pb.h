// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bitcoin.proto

#ifndef PROTOBUF_bitcoin_2eproto__INCLUDED
#define PROTOBUF_bitcoin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bitcoin_2eproto();
void protobuf_AssignDesc_bitcoin_2eproto();
void protobuf_ShutdownFile_bitcoin_2eproto();

class Block;
class Transaction;
class Transaction_BlockPointer;
class Transaction_Input;
class Transaction_Output;

// ===================================================================

class Block : public ::google::protobuf::Message {
 public:
  Block();
  virtual ~Block();
  
  Block(const Block& from);
  
  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Block& default_instance();
  
  void Swap(Block* other);
  
  // implements Message ----------------------------------------------
  
  Block* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 depth = 2;
  inline bool has_depth() const;
  inline void clear_depth();
  static const int kDepthFieldNumber = 2;
  inline ::google::protobuf::uint32 depth() const;
  inline void set_depth(::google::protobuf::uint32 value);
  
  // required uint32 version = 6;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 6;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);
  
  // required bytes previous_block_hash = 7;
  inline bool has_previous_block_hash() const;
  inline void clear_previous_block_hash();
  static const int kPreviousBlockHashFieldNumber = 7;
  inline const ::std::string& previous_block_hash() const;
  inline void set_previous_block_hash(const ::std::string& value);
  inline void set_previous_block_hash(const char* value);
  inline void set_previous_block_hash(const void* value, size_t size);
  inline ::std::string* mutable_previous_block_hash();
  inline ::std::string* release_previous_block_hash();
  
  // required bytes merkle = 8;
  inline bool has_merkle() const;
  inline void clear_merkle();
  static const int kMerkleFieldNumber = 8;
  inline const ::std::string& merkle() const;
  inline void set_merkle(const ::std::string& value);
  inline void set_merkle(const char* value);
  inline void set_merkle(const void* value, size_t size);
  inline ::std::string* mutable_merkle();
  inline ::std::string* release_merkle();
  
  // required uint32 timestamp = 9;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 9;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);
  
  // required uint32 bits = 10;
  inline bool has_bits() const;
  inline void clear_bits();
  static const int kBitsFieldNumber = 10;
  inline ::google::protobuf::uint32 bits() const;
  inline void set_bits(::google::protobuf::uint32 value);
  
  // required uint32 nonce = 11;
  inline bool has_nonce() const;
  inline void clear_nonce();
  static const int kNonceFieldNumber = 11;
  inline ::google::protobuf::uint32 nonce() const;
  inline void set_nonce(::google::protobuf::uint32 value);
  
  // repeated bytes transactions = 12;
  inline int transactions_size() const;
  inline void clear_transactions();
  static const int kTransactionsFieldNumber = 12;
  inline const ::std::string& transactions(int index) const;
  inline ::std::string* mutable_transactions(int index);
  inline void set_transactions(int index, const ::std::string& value);
  inline void set_transactions(int index, const char* value);
  inline void set_transactions(int index, const void* value, size_t size);
  inline ::std::string* add_transactions();
  inline void add_transactions(const ::std::string& value);
  inline void add_transactions(const char* value);
  inline void add_transactions(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& transactions() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_transactions();
  
  // @@protoc_insertion_point(class_scope:protobuf.Block)
 private:
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_previous_block_hash();
  inline void clear_has_previous_block_hash();
  inline void set_has_merkle();
  inline void clear_has_merkle();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_bits();
  inline void clear_has_bits();
  inline void set_has_nonce();
  inline void clear_has_nonce();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 depth_;
  ::google::protobuf::uint32 version_;
  ::std::string* previous_block_hash_;
  ::std::string* merkle_;
  ::google::protobuf::uint32 timestamp_;
  ::google::protobuf::uint32 bits_;
  ::google::protobuf::RepeatedPtrField< ::std::string> transactions_;
  ::google::protobuf::uint32 nonce_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_bitcoin_2eproto();
  friend void protobuf_AssignDesc_bitcoin_2eproto();
  friend void protobuf_ShutdownFile_bitcoin_2eproto();
  
  void InitAsDefaultInstance();
  static Block* default_instance_;
};
// -------------------------------------------------------------------

class Transaction_BlockPointer : public ::google::protobuf::Message {
 public:
  Transaction_BlockPointer();
  virtual ~Transaction_BlockPointer();
  
  Transaction_BlockPointer(const Transaction_BlockPointer& from);
  
  inline Transaction_BlockPointer& operator=(const Transaction_BlockPointer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Transaction_BlockPointer& default_instance();
  
  void Swap(Transaction_BlockPointer* other);
  
  // implements Message ----------------------------------------------
  
  Transaction_BlockPointer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transaction_BlockPointer& from);
  void MergeFrom(const Transaction_BlockPointer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 depth = 1;
  inline bool has_depth() const;
  inline void clear_depth();
  static const int kDepthFieldNumber = 1;
  inline ::google::protobuf::uint32 depth() const;
  inline void set_depth(::google::protobuf::uint32 value);
  
  // required uint32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.Transaction.BlockPointer)
 private:
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 depth_;
  ::google::protobuf::uint32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_bitcoin_2eproto();
  friend void protobuf_AssignDesc_bitcoin_2eproto();
  friend void protobuf_ShutdownFile_bitcoin_2eproto();
  
  void InitAsDefaultInstance();
  static Transaction_BlockPointer* default_instance_;
};
// -------------------------------------------------------------------

class Transaction_Input : public ::google::protobuf::Message {
 public:
  Transaction_Input();
  virtual ~Transaction_Input();
  
  Transaction_Input(const Transaction_Input& from);
  
  inline Transaction_Input& operator=(const Transaction_Input& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Transaction_Input& default_instance();
  
  void Swap(Transaction_Input* other);
  
  // implements Message ----------------------------------------------
  
  Transaction_Input* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transaction_Input& from);
  void MergeFrom(const Transaction_Input& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes previous_output_hash = 1;
  inline bool has_previous_output_hash() const;
  inline void clear_previous_output_hash();
  static const int kPreviousOutputHashFieldNumber = 1;
  inline const ::std::string& previous_output_hash() const;
  inline void set_previous_output_hash(const ::std::string& value);
  inline void set_previous_output_hash(const char* value);
  inline void set_previous_output_hash(const void* value, size_t size);
  inline ::std::string* mutable_previous_output_hash();
  inline ::std::string* release_previous_output_hash();
  
  // required uint32 previous_output_index = 2;
  inline bool has_previous_output_index() const;
  inline void clear_previous_output_index();
  static const int kPreviousOutputIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 previous_output_index() const;
  inline void set_previous_output_index(::google::protobuf::uint32 value);
  
  // required bytes script = 3;
  inline bool has_script() const;
  inline void clear_script();
  static const int kScriptFieldNumber = 3;
  inline const ::std::string& script() const;
  inline void set_script(const ::std::string& value);
  inline void set_script(const char* value);
  inline void set_script(const void* value, size_t size);
  inline ::std::string* mutable_script();
  inline ::std::string* release_script();
  
  // required uint32 sequence = 4;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 4;
  inline ::google::protobuf::uint32 sequence() const;
  inline void set_sequence(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.Transaction.Input)
 private:
  inline void set_has_previous_output_hash();
  inline void clear_has_previous_output_hash();
  inline void set_has_previous_output_index();
  inline void clear_has_previous_output_index();
  inline void set_has_script();
  inline void clear_has_script();
  inline void set_has_sequence();
  inline void clear_has_sequence();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* previous_output_hash_;
  ::std::string* script_;
  ::google::protobuf::uint32 previous_output_index_;
  ::google::protobuf::uint32 sequence_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_bitcoin_2eproto();
  friend void protobuf_AssignDesc_bitcoin_2eproto();
  friend void protobuf_ShutdownFile_bitcoin_2eproto();
  
  void InitAsDefaultInstance();
  static Transaction_Input* default_instance_;
};
// -------------------------------------------------------------------

class Transaction_Output : public ::google::protobuf::Message {
 public:
  Transaction_Output();
  virtual ~Transaction_Output();
  
  Transaction_Output(const Transaction_Output& from);
  
  inline Transaction_Output& operator=(const Transaction_Output& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Transaction_Output& default_instance();
  
  void Swap(Transaction_Output* other);
  
  // implements Message ----------------------------------------------
  
  Transaction_Output* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transaction_Output& from);
  void MergeFrom(const Transaction_Output& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::uint64 value() const;
  inline void set_value(::google::protobuf::uint64 value);
  
  // required bytes script = 2;
  inline bool has_script() const;
  inline void clear_script();
  static const int kScriptFieldNumber = 2;
  inline const ::std::string& script() const;
  inline void set_script(const ::std::string& value);
  inline void set_script(const char* value);
  inline void set_script(const void* value, size_t size);
  inline ::std::string* mutable_script();
  inline ::std::string* release_script();
  
  // @@protoc_insertion_point(class_scope:protobuf.Transaction.Output)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_script();
  inline void clear_has_script();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 value_;
  ::std::string* script_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_bitcoin_2eproto();
  friend void protobuf_AssignDesc_bitcoin_2eproto();
  friend void protobuf_ShutdownFile_bitcoin_2eproto();
  
  void InitAsDefaultInstance();
  static Transaction_Output* default_instance_;
};
// -------------------------------------------------------------------

class Transaction : public ::google::protobuf::Message {
 public:
  Transaction();
  virtual ~Transaction();
  
  Transaction(const Transaction& from);
  
  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Transaction& default_instance();
  
  void Swap(Transaction* other);
  
  // implements Message ----------------------------------------------
  
  Transaction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Transaction_BlockPointer BlockPointer;
  typedef Transaction_Input Input;
  typedef Transaction_Output Output;
  
  // accessors -------------------------------------------------------
  
  // required .protobuf.Transaction.BlockPointer parent = 1;
  inline bool has_parent() const;
  inline void clear_parent();
  static const int kParentFieldNumber = 1;
  inline const ::protobuf::Transaction_BlockPointer& parent() const;
  inline ::protobuf::Transaction_BlockPointer* mutable_parent();
  inline ::protobuf::Transaction_BlockPointer* release_parent();
  
  // repeated .protobuf.Transaction.Input inputs = 3;
  inline int inputs_size() const;
  inline void clear_inputs();
  static const int kInputsFieldNumber = 3;
  inline const ::protobuf::Transaction_Input& inputs(int index) const;
  inline ::protobuf::Transaction_Input* mutable_inputs(int index);
  inline ::protobuf::Transaction_Input* add_inputs();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::Transaction_Input >&
      inputs() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::Transaction_Input >*
      mutable_inputs();
  
  // repeated .protobuf.Transaction.Output outputs = 4;
  inline int outputs_size() const;
  inline void clear_outputs();
  static const int kOutputsFieldNumber = 4;
  inline const ::protobuf::Transaction_Output& outputs(int index) const;
  inline ::protobuf::Transaction_Output* mutable_outputs(int index);
  inline ::protobuf::Transaction_Output* add_outputs();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::Transaction_Output >&
      outputs() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::Transaction_Output >*
      mutable_outputs();
  
  // required uint32 version = 5;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 5;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);
  
  // required uint32 locktime = 6;
  inline bool has_locktime() const;
  inline void clear_locktime();
  static const int kLocktimeFieldNumber = 6;
  inline ::google::protobuf::uint32 locktime() const;
  inline void set_locktime(::google::protobuf::uint32 value);
  
  // required bool is_coinbase = 7;
  inline bool has_is_coinbase() const;
  inline void clear_is_coinbase();
  static const int kIsCoinbaseFieldNumber = 7;
  inline bool is_coinbase() const;
  inline void set_is_coinbase(bool value);
  
  // @@protoc_insertion_point(class_scope:protobuf.Transaction)
 private:
  inline void set_has_parent();
  inline void clear_has_parent();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_locktime();
  inline void clear_has_locktime();
  inline void set_has_is_coinbase();
  inline void clear_has_is_coinbase();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::protobuf::Transaction_BlockPointer* parent_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::Transaction_Input > inputs_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::Transaction_Output > outputs_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 locktime_;
  bool is_coinbase_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_bitcoin_2eproto();
  friend void protobuf_AssignDesc_bitcoin_2eproto();
  friend void protobuf_ShutdownFile_bitcoin_2eproto();
  
  void InitAsDefaultInstance();
  static Transaction* default_instance_;
};
// ===================================================================


// ===================================================================

// Block

// required uint32 depth = 2;
inline bool Block::has_depth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Block::set_has_depth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Block::clear_has_depth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Block::clear_depth() {
  depth_ = 0u;
  clear_has_depth();
}
inline ::google::protobuf::uint32 Block::depth() const {
  return depth_;
}
inline void Block::set_depth(::google::protobuf::uint32 value) {
  set_has_depth();
  depth_ = value;
}

// required uint32 version = 6;
inline bool Block::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Block::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Block::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Block::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 Block::version() const {
  return version_;
}
inline void Block::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
}

// required bytes previous_block_hash = 7;
inline bool Block::has_previous_block_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Block::set_has_previous_block_hash() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Block::clear_has_previous_block_hash() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Block::clear_previous_block_hash() {
  if (previous_block_hash_ != &::google::protobuf::internal::kEmptyString) {
    previous_block_hash_->clear();
  }
  clear_has_previous_block_hash();
}
inline const ::std::string& Block::previous_block_hash() const {
  return *previous_block_hash_;
}
inline void Block::set_previous_block_hash(const ::std::string& value) {
  set_has_previous_block_hash();
  if (previous_block_hash_ == &::google::protobuf::internal::kEmptyString) {
    previous_block_hash_ = new ::std::string;
  }
  previous_block_hash_->assign(value);
}
inline void Block::set_previous_block_hash(const char* value) {
  set_has_previous_block_hash();
  if (previous_block_hash_ == &::google::protobuf::internal::kEmptyString) {
    previous_block_hash_ = new ::std::string;
  }
  previous_block_hash_->assign(value);
}
inline void Block::set_previous_block_hash(const void* value, size_t size) {
  set_has_previous_block_hash();
  if (previous_block_hash_ == &::google::protobuf::internal::kEmptyString) {
    previous_block_hash_ = new ::std::string;
  }
  previous_block_hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Block::mutable_previous_block_hash() {
  set_has_previous_block_hash();
  if (previous_block_hash_ == &::google::protobuf::internal::kEmptyString) {
    previous_block_hash_ = new ::std::string;
  }
  return previous_block_hash_;
}
inline ::std::string* Block::release_previous_block_hash() {
  clear_has_previous_block_hash();
  if (previous_block_hash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = previous_block_hash_;
    previous_block_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes merkle = 8;
inline bool Block::has_merkle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Block::set_has_merkle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Block::clear_has_merkle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Block::clear_merkle() {
  if (merkle_ != &::google::protobuf::internal::kEmptyString) {
    merkle_->clear();
  }
  clear_has_merkle();
}
inline const ::std::string& Block::merkle() const {
  return *merkle_;
}
inline void Block::set_merkle(const ::std::string& value) {
  set_has_merkle();
  if (merkle_ == &::google::protobuf::internal::kEmptyString) {
    merkle_ = new ::std::string;
  }
  merkle_->assign(value);
}
inline void Block::set_merkle(const char* value) {
  set_has_merkle();
  if (merkle_ == &::google::protobuf::internal::kEmptyString) {
    merkle_ = new ::std::string;
  }
  merkle_->assign(value);
}
inline void Block::set_merkle(const void* value, size_t size) {
  set_has_merkle();
  if (merkle_ == &::google::protobuf::internal::kEmptyString) {
    merkle_ = new ::std::string;
  }
  merkle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Block::mutable_merkle() {
  set_has_merkle();
  if (merkle_ == &::google::protobuf::internal::kEmptyString) {
    merkle_ = new ::std::string;
  }
  return merkle_;
}
inline ::std::string* Block::release_merkle() {
  clear_has_merkle();
  if (merkle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = merkle_;
    merkle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 timestamp = 9;
inline bool Block::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Block::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Block::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Block::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 Block::timestamp() const {
  return timestamp_;
}
inline void Block::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required uint32 bits = 10;
inline bool Block::has_bits() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Block::set_has_bits() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Block::clear_has_bits() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Block::clear_bits() {
  bits_ = 0u;
  clear_has_bits();
}
inline ::google::protobuf::uint32 Block::bits() const {
  return bits_;
}
inline void Block::set_bits(::google::protobuf::uint32 value) {
  set_has_bits();
  bits_ = value;
}

// required uint32 nonce = 11;
inline bool Block::has_nonce() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Block::set_has_nonce() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Block::clear_has_nonce() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Block::clear_nonce() {
  nonce_ = 0u;
  clear_has_nonce();
}
inline ::google::protobuf::uint32 Block::nonce() const {
  return nonce_;
}
inline void Block::set_nonce(::google::protobuf::uint32 value) {
  set_has_nonce();
  nonce_ = value;
}

// repeated bytes transactions = 12;
inline int Block::transactions_size() const {
  return transactions_.size();
}
inline void Block::clear_transactions() {
  transactions_.Clear();
}
inline const ::std::string& Block::transactions(int index) const {
  return transactions_.Get(index);
}
inline ::std::string* Block::mutable_transactions(int index) {
  return transactions_.Mutable(index);
}
inline void Block::set_transactions(int index, const ::std::string& value) {
  transactions_.Mutable(index)->assign(value);
}
inline void Block::set_transactions(int index, const char* value) {
  transactions_.Mutable(index)->assign(value);
}
inline void Block::set_transactions(int index, const void* value, size_t size) {
  transactions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Block::add_transactions() {
  return transactions_.Add();
}
inline void Block::add_transactions(const ::std::string& value) {
  transactions_.Add()->assign(value);
}
inline void Block::add_transactions(const char* value) {
  transactions_.Add()->assign(value);
}
inline void Block::add_transactions(const void* value, size_t size) {
  transactions_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Block::transactions() const {
  return transactions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Block::mutable_transactions() {
  return &transactions_;
}

// -------------------------------------------------------------------

// Transaction_BlockPointer

// required uint32 depth = 1;
inline bool Transaction_BlockPointer::has_depth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transaction_BlockPointer::set_has_depth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transaction_BlockPointer::clear_has_depth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transaction_BlockPointer::clear_depth() {
  depth_ = 0u;
  clear_has_depth();
}
inline ::google::protobuf::uint32 Transaction_BlockPointer::depth() const {
  return depth_;
}
inline void Transaction_BlockPointer::set_depth(::google::protobuf::uint32 value) {
  set_has_depth();
  depth_ = value;
}

// required uint32 index = 2;
inline bool Transaction_BlockPointer::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transaction_BlockPointer::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transaction_BlockPointer::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transaction_BlockPointer::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 Transaction_BlockPointer::index() const {
  return index_;
}
inline void Transaction_BlockPointer::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// Transaction_Input

// required bytes previous_output_hash = 1;
inline bool Transaction_Input::has_previous_output_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transaction_Input::set_has_previous_output_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transaction_Input::clear_has_previous_output_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transaction_Input::clear_previous_output_hash() {
  if (previous_output_hash_ != &::google::protobuf::internal::kEmptyString) {
    previous_output_hash_->clear();
  }
  clear_has_previous_output_hash();
}
inline const ::std::string& Transaction_Input::previous_output_hash() const {
  return *previous_output_hash_;
}
inline void Transaction_Input::set_previous_output_hash(const ::std::string& value) {
  set_has_previous_output_hash();
  if (previous_output_hash_ == &::google::protobuf::internal::kEmptyString) {
    previous_output_hash_ = new ::std::string;
  }
  previous_output_hash_->assign(value);
}
inline void Transaction_Input::set_previous_output_hash(const char* value) {
  set_has_previous_output_hash();
  if (previous_output_hash_ == &::google::protobuf::internal::kEmptyString) {
    previous_output_hash_ = new ::std::string;
  }
  previous_output_hash_->assign(value);
}
inline void Transaction_Input::set_previous_output_hash(const void* value, size_t size) {
  set_has_previous_output_hash();
  if (previous_output_hash_ == &::google::protobuf::internal::kEmptyString) {
    previous_output_hash_ = new ::std::string;
  }
  previous_output_hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transaction_Input::mutable_previous_output_hash() {
  set_has_previous_output_hash();
  if (previous_output_hash_ == &::google::protobuf::internal::kEmptyString) {
    previous_output_hash_ = new ::std::string;
  }
  return previous_output_hash_;
}
inline ::std::string* Transaction_Input::release_previous_output_hash() {
  clear_has_previous_output_hash();
  if (previous_output_hash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = previous_output_hash_;
    previous_output_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 previous_output_index = 2;
inline bool Transaction_Input::has_previous_output_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transaction_Input::set_has_previous_output_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transaction_Input::clear_has_previous_output_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transaction_Input::clear_previous_output_index() {
  previous_output_index_ = 0u;
  clear_has_previous_output_index();
}
inline ::google::protobuf::uint32 Transaction_Input::previous_output_index() const {
  return previous_output_index_;
}
inline void Transaction_Input::set_previous_output_index(::google::protobuf::uint32 value) {
  set_has_previous_output_index();
  previous_output_index_ = value;
}

// required bytes script = 3;
inline bool Transaction_Input::has_script() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transaction_Input::set_has_script() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Transaction_Input::clear_has_script() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Transaction_Input::clear_script() {
  if (script_ != &::google::protobuf::internal::kEmptyString) {
    script_->clear();
  }
  clear_has_script();
}
inline const ::std::string& Transaction_Input::script() const {
  return *script_;
}
inline void Transaction_Input::set_script(const ::std::string& value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::kEmptyString) {
    script_ = new ::std::string;
  }
  script_->assign(value);
}
inline void Transaction_Input::set_script(const char* value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::kEmptyString) {
    script_ = new ::std::string;
  }
  script_->assign(value);
}
inline void Transaction_Input::set_script(const void* value, size_t size) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::kEmptyString) {
    script_ = new ::std::string;
  }
  script_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transaction_Input::mutable_script() {
  set_has_script();
  if (script_ == &::google::protobuf::internal::kEmptyString) {
    script_ = new ::std::string;
  }
  return script_;
}
inline ::std::string* Transaction_Input::release_script() {
  clear_has_script();
  if (script_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = script_;
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 sequence = 4;
inline bool Transaction_Input::has_sequence() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Transaction_Input::set_has_sequence() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Transaction_Input::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Transaction_Input::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::protobuf::uint32 Transaction_Input::sequence() const {
  return sequence_;
}
inline void Transaction_Input::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
}

// -------------------------------------------------------------------

// Transaction_Output

// required uint64 value = 1;
inline bool Transaction_Output::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transaction_Output::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transaction_Output::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transaction_Output::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 Transaction_Output::value() const {
  return value_;
}
inline void Transaction_Output::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
}

// required bytes script = 2;
inline bool Transaction_Output::has_script() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transaction_Output::set_has_script() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transaction_Output::clear_has_script() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transaction_Output::clear_script() {
  if (script_ != &::google::protobuf::internal::kEmptyString) {
    script_->clear();
  }
  clear_has_script();
}
inline const ::std::string& Transaction_Output::script() const {
  return *script_;
}
inline void Transaction_Output::set_script(const ::std::string& value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::kEmptyString) {
    script_ = new ::std::string;
  }
  script_->assign(value);
}
inline void Transaction_Output::set_script(const char* value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::kEmptyString) {
    script_ = new ::std::string;
  }
  script_->assign(value);
}
inline void Transaction_Output::set_script(const void* value, size_t size) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::kEmptyString) {
    script_ = new ::std::string;
  }
  script_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transaction_Output::mutable_script() {
  set_has_script();
  if (script_ == &::google::protobuf::internal::kEmptyString) {
    script_ = new ::std::string;
  }
  return script_;
}
inline ::std::string* Transaction_Output::release_script() {
  clear_has_script();
  if (script_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = script_;
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Transaction

// required .protobuf.Transaction.BlockPointer parent = 1;
inline bool Transaction::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transaction::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transaction::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transaction::clear_parent() {
  if (parent_ != NULL) parent_->::protobuf::Transaction_BlockPointer::Clear();
  clear_has_parent();
}
inline const ::protobuf::Transaction_BlockPointer& Transaction::parent() const {
  return parent_ != NULL ? *parent_ : *default_instance_->parent_;
}
inline ::protobuf::Transaction_BlockPointer* Transaction::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) parent_ = new ::protobuf::Transaction_BlockPointer;
  return parent_;
}
inline ::protobuf::Transaction_BlockPointer* Transaction::release_parent() {
  clear_has_parent();
  ::protobuf::Transaction_BlockPointer* temp = parent_;
  parent_ = NULL;
  return temp;
}

// repeated .protobuf.Transaction.Input inputs = 3;
inline int Transaction::inputs_size() const {
  return inputs_.size();
}
inline void Transaction::clear_inputs() {
  inputs_.Clear();
}
inline const ::protobuf::Transaction_Input& Transaction::inputs(int index) const {
  return inputs_.Get(index);
}
inline ::protobuf::Transaction_Input* Transaction::mutable_inputs(int index) {
  return inputs_.Mutable(index);
}
inline ::protobuf::Transaction_Input* Transaction::add_inputs() {
  return inputs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::Transaction_Input >&
Transaction::inputs() const {
  return inputs_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::Transaction_Input >*
Transaction::mutable_inputs() {
  return &inputs_;
}

// repeated .protobuf.Transaction.Output outputs = 4;
inline int Transaction::outputs_size() const {
  return outputs_.size();
}
inline void Transaction::clear_outputs() {
  outputs_.Clear();
}
inline const ::protobuf::Transaction_Output& Transaction::outputs(int index) const {
  return outputs_.Get(index);
}
inline ::protobuf::Transaction_Output* Transaction::mutable_outputs(int index) {
  return outputs_.Mutable(index);
}
inline ::protobuf::Transaction_Output* Transaction::add_outputs() {
  return outputs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::Transaction_Output >&
Transaction::outputs() const {
  return outputs_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::Transaction_Output >*
Transaction::mutable_outputs() {
  return &outputs_;
}

// required uint32 version = 5;
inline bool Transaction::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Transaction::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Transaction::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Transaction::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 Transaction::version() const {
  return version_;
}
inline void Transaction::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
}

// required uint32 locktime = 6;
inline bool Transaction::has_locktime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Transaction::set_has_locktime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Transaction::clear_has_locktime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Transaction::clear_locktime() {
  locktime_ = 0u;
  clear_has_locktime();
}
inline ::google::protobuf::uint32 Transaction::locktime() const {
  return locktime_;
}
inline void Transaction::set_locktime(::google::protobuf::uint32 value) {
  set_has_locktime();
  locktime_ = value;
}

// required bool is_coinbase = 7;
inline bool Transaction::has_is_coinbase() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Transaction::set_has_is_coinbase() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Transaction::clear_has_is_coinbase() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Transaction::clear_is_coinbase() {
  is_coinbase_ = false;
  clear_has_is_coinbase();
}
inline bool Transaction::is_coinbase() const {
  return is_coinbase_;
}
inline void Transaction::set_is_coinbase(bool value) {
  set_has_is_coinbase();
  is_coinbase_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bitcoin_2eproto__INCLUDED
